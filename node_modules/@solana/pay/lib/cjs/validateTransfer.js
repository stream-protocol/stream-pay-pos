"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.validateTransfer = exports.ValidateTransferError = void 0;
const spl_token_1 = require("@solana/spl-token");
const web3_js_1 = require("@solana/web3.js");
const bignumber_js_1 = __importDefault(require("bignumber.js"));
/**
 * Thrown when a transaction doesn't contain a valid Solana Pay transfer.
 */
class ValidateTransferError extends Error {
    constructor() {
        super(...arguments);
        this.name = 'ValidateTransferError';
    }
}
exports.ValidateTransferError = ValidateTransferError;
/**
 * Check that a given transaction contains a valid Solana Pay transfer.
 *
 * @param connection - A connection to the cluster.
 * @param signature - The signature of the transaction to validate.
 * @param fields - Fields of a Solana Pay transfer request to validate.
 * @param options - Options for `getTransaction`.
 *
 * @throws {ValidateTransferError}
 */
function validateTransfer(connection, signature, { recipient, amount, splToken, reference, memo }, options) {
    return __awaiter(this, void 0, void 0, function* () {
        const response = yield connection.getTransaction(signature, options);
        if (!response)
            throw new ValidateTransferError('not found');
        const message = response.transaction.message;
        const meta = response.meta;
        if (!meta)
            throw new ValidateTransferError('missing meta');
        if (meta.err)
            throw meta.err;
        const [preAmount, postAmount] = splToken
            ? yield validateSPLTokenTransfer(message, meta, recipient, splToken)
            : yield validateSystemTransfer(message, meta, recipient);
        if (postAmount.minus(preAmount).lt(amount))
            throw new ValidateTransferError('amount not transferred');
        if (reference) {
            if (!Array.isArray(reference)) {
                reference = [reference];
            }
            for (const pubkey of reference) {
                if (!message.accountKeys.some((accountKey) => accountKey.equals(pubkey)))
                    throw new ValidateTransferError('reference not found');
            }
        }
        // FIXME: add memo check
        return response;
    });
}
exports.validateTransfer = validateTransfer;
function validateSystemTransfer(message, meta, recipient) {
    return __awaiter(this, void 0, void 0, function* () {
        const accountIndex = message.accountKeys.findIndex((pubkey) => pubkey.equals(recipient));
        if (accountIndex === -1)
            throw new ValidateTransferError('recipient not found');
        return [
            new bignumber_js_1.default(meta.preBalances[accountIndex] || 0).div(web3_js_1.LAMPORTS_PER_SOL),
            new bignumber_js_1.default(meta.postBalances[accountIndex] || 0).div(web3_js_1.LAMPORTS_PER_SOL),
        ];
    });
}
function validateSPLTokenTransfer(message, meta, recipient, splToken) {
    var _a, _b;
    return __awaiter(this, void 0, void 0, function* () {
        const recipientATA = yield (0, spl_token_1.getAssociatedTokenAddress)(splToken, recipient);
        const accountIndex = message.accountKeys.findIndex((pubkey) => pubkey.equals(recipientATA));
        if (accountIndex === -1)
            throw new ValidateTransferError('recipient not found');
        const preBalance = (_a = meta.preTokenBalances) === null || _a === void 0 ? void 0 : _a.find((x) => x.accountIndex === accountIndex);
        const postBalance = (_b = meta.postTokenBalances) === null || _b === void 0 ? void 0 : _b.find((x) => x.accountIndex === accountIndex);
        return [
            new bignumber_js_1.default((preBalance === null || preBalance === void 0 ? void 0 : preBalance.uiTokenAmount.uiAmountString) || 0),
            new bignumber_js_1.default((postBalance === null || postBalance === void 0 ? void 0 : postBalance.uiTokenAmount.uiAmountString) || 0),
        ];
    });
}
//# sourceMappingURL=validateTransfer.js.map