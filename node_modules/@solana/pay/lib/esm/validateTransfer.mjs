import { getAssociatedTokenAddress } from '@solana/spl-token';
import { LAMPORTS_PER_SOL, } from '@solana/web3.js';
import BigNumber from 'bignumber.js';
/**
 * Thrown when a transaction doesn't contain a valid Solana Pay transfer.
 */
export class ValidateTransferError extends Error {
    constructor() {
        super(...arguments);
        this.name = 'ValidateTransferError';
    }
}
/**
 * Check that a given transaction contains a valid Solana Pay transfer.
 *
 * @param connection - A connection to the cluster.
 * @param signature - The signature of the transaction to validate.
 * @param fields - Fields of a Solana Pay transfer request to validate.
 * @param options - Options for `getTransaction`.
 *
 * @throws {ValidateTransferError}
 */
export async function validateTransfer(connection, signature, { recipient, amount, splToken, reference, memo }, options) {
    const response = await connection.getTransaction(signature, options);
    if (!response)
        throw new ValidateTransferError('not found');
    const message = response.transaction.message;
    const meta = response.meta;
    if (!meta)
        throw new ValidateTransferError('missing meta');
    if (meta.err)
        throw meta.err;
    const [preAmount, postAmount] = splToken
        ? await validateSPLTokenTransfer(message, meta, recipient, splToken)
        : await validateSystemTransfer(message, meta, recipient);
    if (postAmount.minus(preAmount).lt(amount))
        throw new ValidateTransferError('amount not transferred');
    if (reference) {
        if (!Array.isArray(reference)) {
            reference = [reference];
        }
        for (const pubkey of reference) {
            if (!message.accountKeys.some((accountKey) => accountKey.equals(pubkey)))
                throw new ValidateTransferError('reference not found');
        }
    }
    // FIXME: add memo check
    return response;
}
async function validateSystemTransfer(message, meta, recipient) {
    const accountIndex = message.accountKeys.findIndex((pubkey) => pubkey.equals(recipient));
    if (accountIndex === -1)
        throw new ValidateTransferError('recipient not found');
    return [
        new BigNumber(meta.preBalances[accountIndex] || 0).div(LAMPORTS_PER_SOL),
        new BigNumber(meta.postBalances[accountIndex] || 0).div(LAMPORTS_PER_SOL),
    ];
}
async function validateSPLTokenTransfer(message, meta, recipient, splToken) {
    var _a, _b;
    const recipientATA = await getAssociatedTokenAddress(splToken, recipient);
    const accountIndex = message.accountKeys.findIndex((pubkey) => pubkey.equals(recipientATA));
    if (accountIndex === -1)
        throw new ValidateTransferError('recipient not found');
    const preBalance = (_a = meta.preTokenBalances) === null || _a === void 0 ? void 0 : _a.find((x) => x.accountIndex === accountIndex);
    const postBalance = (_b = meta.postTokenBalances) === null || _b === void 0 ? void 0 : _b.find((x) => x.accountIndex === accountIndex);
    return [
        new BigNumber((preBalance === null || preBalance === void 0 ? void 0 : preBalance.uiTokenAmount.uiAmountString) || 0),
        new BigNumber((postBalance === null || postBalance === void 0 ? void 0 : postBalance.uiTokenAmount.uiAmountString) || 0),
    ];
}
//# sourceMappingURL=validateTransfer.js.map